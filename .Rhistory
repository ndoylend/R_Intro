#ggsave(file = paste0(filepath, filename), width = 5, height = 5, dpi = 300)
#embed_fonts(file = paste0(filepath, filename))
filename <- "Report_Plots/histDHW_Gas-Cold_Fill.pdf"
binWidth <- 50
xLim <- c(0, 800); xInt <- binWidth * 2
xBreaks <- seq(from = xLim[1], to = xLim[2], by = xInt)
pFilter <- TRUE # (myDaily$DayType == "Weekday") # if weekdays only required
pFilter <- datefilter & pFilter & (myDaily$Cold_Fill > 0 & myDaily$Date >= as.Date("2013-07-19"))
xMedian <- with(myDaily, median(DHW_Gas[pFilter]/Cold_Fill[pFilter], na.rm = TRUE))
# Calculate bootstrap CI for median
bootMed <- apply(matrix(sample(myDaily[pFilter, ]$DHW_Gas/myDaily[pFilter, ]$Cold_Fill, rep=TRUE,
10^4 * length(myDaily[pFilter, ]$DHW_Gas/myDaily[pFilter, ]$Cold_Fill)),
nrow = 10^4), 1, median, na.rm = TRUE)
myPlot <- ggplot(myDaily[pFilter, ], aes(x = DHW_Gas/Cold_Fill)) +
geom_histogram(colour = "black", fill = "white", binwidth = binWidth) +
geom_density(aes(binWidth = binWidth, y = binWidth * ..count.. ), colour = "red", fill = "red", alpha = 0.1) +
geom_density(aes(binWidth = binWidth, y = binWidth * ..count.. ), colour = "black", alpha = 1)
# position median label above the largest of either the maximum frequency
# in the histogram data [[1]], or the maximum frequency in density data [[2]]
myLabelY <- max(max(ggplot_build(myPlot)$data[[1]]$y),
max(ggplot_build(myPlot)$data[[2]]$y))
myPlot +
geom_vline(aes(xintercept = xMedian), colour = "red", linetype = "dashed") +
#geom_vline(aes(xintercept = quantile(bootMed, 0.025)), # lower CI
#           colour = "grey", linetype = "dashed") +
#geom_vline(aes(xintercept = quantile(bootMed, 0.975)), # upper CI
#           colour = "grey", linetype = "dashed") +
geom_vline(aes(xintercept = 143.84), # IES estimate
colour = "red", linetype = "dashed") +
scale_x_continuous(name = expression(Gas~Consumption/Water~Use~(kWh/m^3)),
limits = xLim, breaks = xBreaks) +
scale_y_continuous(name = "Frequency") +
annotate("text", x = xMedian, y = myLabelY * 1.05,
label = paste("Median:", fmt(xMedian)), size = 4, colour = "black",
family = "CMU Serif") +
annotate("text", x = 143.84, y = myLabelY * 0.5,
label = paste("Modelled:\n 143.84"), size = 4, colour = "black",
family = "CMU Serif", angle = 0, vjust = 0.5, hjust = 0.5) +
plotDefaults + theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5))
#ggsave(file = paste0(filepath, filename), width = 5, height = 5, dpi = 300)
#embed_fonts(file = paste0(filepath, filename))
filename <- "Report_Plots/histDHW_Gas-Cold_Fill.png"
binWidth <- 50
xLim <- c(0, 800); xInt <- binWidth * 2
xBreaks <- seq(from = xLim[1], to = xLim[2], by = xInt)
pFilter <- TRUE # (myDaily$DayType == "Weekday") # if weekdays only required
pFilter <- datefilter & pFilter & (myDaily$Cold_Fill > 0 & myDaily$Date >= as.Date("2013-07-19"))
xMedian <- with(myDaily, median(DHW_Gas[pFilter]/Cold_Fill[pFilter], na.rm = TRUE))
# Calculate bootstrap CI for median
bootMed <- apply(matrix(sample(myDaily[pFilter, ]$DHW_Gas/myDaily[pFilter, ]$Cold_Fill, rep=TRUE,
10^4 * length(myDaily[pFilter, ]$DHW_Gas/myDaily[pFilter, ]$Cold_Fill)),
nrow = 10^4), 1, median, na.rm = TRUE)
myPlot <- ggplot(myDaily[pFilter, ], aes(x = DHW_Gas/Cold_Fill)) +
geom_histogram(colour = "black", fill = "white", binwidth = binWidth) +
geom_density(aes(binWidth = binWidth, y = binWidth * ..count.. ), colour = "red", fill = "red", alpha = 0.1) +
geom_density(aes(binWidth = binWidth, y = binWidth * ..count.. ), colour = "black", alpha = 1)
# position median label above the largest of either the maximum frequency
# in the histogram data [[1]], or the maximum frequency in density data [[2]]
myLabelY <- max(max(ggplot_build(myPlot)$data[[1]]$y),
max(ggplot_build(myPlot)$data[[2]]$y))
myPlot +
geom_vline(aes(xintercept = xMedian), colour = "red", linetype = "dashed") +
#geom_vline(aes(xintercept = quantile(bootMed, 0.025)), # lower CI
#           colour = "grey", linetype = "dashed") +
#geom_vline(aes(xintercept = quantile(bootMed, 0.975)), # upper CI
#           colour = "grey", linetype = "dashed") +
geom_vline(aes(xintercept = 143.84), # IES estimate
colour = "red", linetype = "dashed") +
scale_x_continuous(name = expression(Gas~Consumption/Water~Use~(kWh/m^3)),
limits = xLim, breaks = xBreaks) +
scale_y_continuous(name = "Frequency") +
annotate("text", x = xMedian, y = myLabelY * 1.05,
label = paste("Median:", fmt(xMedian)), size = 4, colour = "black",
family = "CMU Serif") +
annotate("text", x = 143.84, y = myLabelY * 0.5,
label = paste("Modelled:\n 143.84"), size = 4, colour = "black",
family = "CMU Serif", angle = 0, vjust = 0.5, hjust = 0.5) +
plotDefaults + theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5))
ggsave(file = paste0(filepath, filename), width = 5, height = 5, dpi = 300)
yN <- 0.0    # Y position for n label
yMed <- 1.05  # Y position for median label
# include all days
pFilter <- (TRUE)
test <- ddply(myData, "Date", summarise,
DateTime = DateTime,
Op_C = cumsum(Operation) * Operation,
Pri_Eff = Pri_Eff)
test <- test[(test$Op_C > 0) & (test$Op_C <= 6), ]
test <- test[(test$Pri_Eff > 0) & (test$Pri_Eff < 1), ]
test$Op_C <- as.factor(test$Op_C)
filename <- "Report_Plots/boxPri_Eff-Op_C-15min.pdf"
ggplot(test[pFilter, ], aes(y = Pri_Eff, x = factor(Op_C))) + geom_boxplot(notch=TRUE) +
stat_summary(fun.data = give.n, geom = "text", size = 4, family = "CMU Serif") +
stat_summary(fun.data = give.median, geom = "text", size = 4, family = "CMU Serif",
parse = TRUE) +
scale_y_continuous(name = "15-Minute Average Efficiency", limits = c(0,1.05)) +
scale_x_discrete(name = "Minutes from schedule start",
limits = (levels(test[pFilter, ]$Op_C)),
labels = c("15","30","45","60","75","90")) +
plotDefaults
#ggsave(file = filename, width = 5, height = 5)
#embed_fonts(file = filename, outfile = filename)
give.n <- function(x){
return(data.frame(y = yN, label = paste0("n = ", length(x))))
}
give.median <- function(x){
myLabel <- substitute(tilde(x) == M, list(M = format(median(x),digits=3)))
return(data.frame(y = yMed, label = as.character(as.expression(myLabel))))
}
plotDefaults <- list(
theme_bw(),
theme(axis.text.x = element_text(angle = 0, vjust = 0.5)),
theme(text=element_text(family="CMU Serif"))
)
yN <- 0.0    # Y position for n label
yMed <- 1.05  # Y position for median label
# include all days
pFilter <- (TRUE)
test <- ddply(myData, "Date", summarise,
DateTime = DateTime,
Op_C = cumsum(Operation) * Operation,
Pri_Eff = Pri_Eff)
test <- test[(test$Op_C > 0) & (test$Op_C <= 6), ]
test <- test[(test$Pri_Eff > 0) & (test$Pri_Eff < 1), ]
test$Op_C <- as.factor(test$Op_C)
filename <- "Report_Plots/boxPri_Eff-Op_C-15min.pdf"
ggplot(test[pFilter, ], aes(y = Pri_Eff, x = factor(Op_C))) + geom_boxplot(notch=TRUE) +
stat_summary(fun.data = give.n, geom = "text", size = 4, family = "CMU Serif") +
stat_summary(fun.data = give.median, geom = "text", size = 4, family = "CMU Serif",
parse = TRUE) +
scale_y_continuous(name = "15-Minute Average Efficiency", limits = c(0,1.05)) +
scale_x_discrete(name = "Minutes from schedule start",
limits = (levels(test[pFilter, ]$Op_C)),
labels = c("15","30","45","60","75","90")) +
plotDefaults
#ggsave(file = filename, width = 5, height = 5)
#embed_fonts(file = filename, outfile = filename)
filename <- "Report_Plots/boxPri_Eff-Op_C-15min.png"
ggplot(test[pFilter, ], aes(y = Pri_Eff, x = factor(Op_C))) + geom_boxplot(notch=TRUE) +
stat_summary(fun.data = give.n, geom = "text", size = 4, family = "CMU Serif") +
stat_summary(fun.data = give.median, geom = "text", size = 4, family = "CMU Serif",
parse = TRUE) +
scale_y_continuous(name = "15-Minute Average Efficiency", limits = c(0,1.05)) +
scale_x_discrete(name = "Minutes from schedule start",
limits = (levels(test[pFilter, ]$Op_C)),
labels = c("15","30","45","60","75","90")) +
plotDefaults
ggsave(file = filename, width = 5, height = 5)
getwd()
filepath <- "/home/nick/R/Analysis/DHW/"
setwd(filepath)
filename <- "Report_Plots/boxPri_Eff-Op_C-15min.png"
ggplot(test[pFilter, ], aes(y = Pri_Eff, x = factor(Op_C))) + geom_boxplot(notch=TRUE) +
stat_summary(fun.data = give.n, geom = "text", size = 4, family = "CMU Serif") +
stat_summary(fun.data = give.median, geom = "text", size = 4, family = "CMU Serif",
parse = TRUE) +
scale_y_continuous(name = "15-Minute Average Efficiency", limits = c(0,1.05)) +
scale_x_discrete(name = "Minutes from schedule start",
limits = (levels(test[pFilter, ]$Op_C)),
labels = c("15","30","45","60","75","90")) +
plotDefaults
ggsave(file = filename, width = 5, height = 5)
# See: Chang, W. 2012 - R Graphics Cookbook
# And: http://stackoverflow.com/questions/3472980/ggplot-how-to-change-facet-labels
facet_names <- list(
'4' = "4WD",
'f' = "FWD",
'r' = "RWD"
)
facet_labels <- function(variable, value){
return(facet_names[value])
}
lm_labels <- function(dat) {
mod <- lm(hwy ~ displ, data=dat)
formula <- sprintf("italic(y) == %.2f %+.2f * italic(x)",
round(coef(mod)[1], 2), round(coef(mod)[2], 2))
r <- cor(dat$displ, dat$hwy)
r2 <- sprintf("italic(R^2) == %.2f", r^2)
data.frame(formula=formula, r2=r2, stringsAsFactors=FALSE)
}
labels <- ddply(mpg, "drv", lm_labels)
ggplot(mpg, aes(x=displ, y=hwy)) + geom_point() +
facet_grid(. ~ drv, labeller = facet_labels) +
xlab("Engine Size (l)") + ylab("Highway Fuel Consumption (mpg)") +
geom_smooth(method=lm, se=FALSE) +
geom_text(x=3, y=40, aes(label=formula), data=labels, parse=TRUE, hjust=0) +
geom_text(x=3, y=35, aes(label=r2), data=labels, parse=TRUE, hjust=0)
# See: Chang, W. 2012 - R Graphics Cookbook
# And: http://stackoverflow.com/questions/3472980/ggplot-how-to-change-facet-labels
facet_names <- list(
'4' = "4WD",
'f' = "FWD",
'r' = "RWD"
)
facet_labels <- function(variable, value){
return(facet_names[value])
}
lm_labels <- function(dat) {
mod <- lm(hwy ~ displ, data=dat)
formula <- sprintf("italic(y) == %.2f %+.2f * italic(x)",
round(coef(mod)[1], 2), round(coef(mod)[2], 2))
r <- cor(dat$displ, dat$hwy)
r2 <- sprintf("italic(R^2) == %.2f", r^2)
data.frame(formula=formula, r2=r2, stringsAsFactors=FALSE)
}
labels <- ddply(mpg, "drv", lm_labels)
ggplot(mpg, aes(x=displ, y=hwy)) + geom_point() +
facet_grid(. ~ drv, labeller = facet_labels) +
xlab("Engine Size (l)") + ylab("Highway Fuel Consumption (mpg)") +
geom_smooth(method=lm, se=FALSE) +
geom_text(x=3, y=40, aes(label=formula), data=labels, parse=TRUE, hjust=0) +
geom_text(x=3, y=35, aes(label=r2), data=labels, parse=TRUE, hjust=0) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
theme(panel.grid.minor = element_blank()) +
theme(text = element_text(family = "CMU Serif"))
# See: Chang, W. 2012 - R Graphics Cookbook
# And: http://stackoverflow.com/questions/3472980/ggplot-how-to-change-facet-labels
facet_names <- list(
'4' = "4WD",
'f' = "FWD",
'r' = "RWD"
)
facet_labels <- function(variable, value){
return(facet_names[value])
}
lm_labels <- function(dat) {
mod <- lm(hwy ~ displ, data=dat)
formula <- sprintf("italic(y) == %.2f %+.2f * italic(x)",
round(coef(mod)[1], 2), round(coef(mod)[2], 2))
r <- cor(dat$displ, dat$hwy)
r2 <- sprintf("italic(R^2) == %.2f", r^2)
data.frame(formula=formula, r2=r2, stringsAsFactors=FALSE)
}
labels <- ddply(mpg, "drv", lm_labels)
ggplot(mpg, aes(x=displ, y=hwy)) + geom_point() +
facet_grid(. ~ drv, labeller = facet_labels) +
xlab("Engine Size (l)") + ylab("Highway Fuel Consumption (mpg)") +
geom_smooth(method=lm, se=FALSE) +
geom_text(x=3, y=40, aes(label=formula), data=labels, parse=TRUE, hjust=0, family = "CMU Serif") +
geom_text(x=3, y=35, aes(label=r2), data=labels, parse=TRUE, hjust=0) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
theme(panel.grid.minor = element_blank()) +
theme(text = element_text(family = "CMU Serif"))
# See: Chang, W. 2012 - R Graphics Cookbook
# And: http://stackoverflow.com/questions/3472980/ggplot-how-to-change-facet-labels
facet_names <- list(
'4' = "4WD",
'f' = "FWD",
'r' = "RWD"
)
facet_labels <- function(variable, value){
return(facet_names[value])
}
lm_labels <- function(dat) {
mod <- lm(hwy ~ displ, data=dat)
formula <- sprintf("italic(y) == %.2f %+.2f * italic(x)",
round(coef(mod)[1], 2), round(coef(mod)[2], 2))
r <- cor(dat$displ, dat$hwy)
r2 <- sprintf("italic(R^2) == %.2f", r^2)
data.frame(formula=formula, r2=r2, stringsAsFactors=FALSE)
}
labels <- ddply(mpg, "drv", lm_labels)
ggplot(mpg, aes(x=displ, y=hwy)) + geom_point() +
facet_grid(. ~ drv, labeller = facet_labels) +
xlab("Engine Size (l)") + ylab("Highway Fuel Consumption (mpg)") +
geom_smooth(method=lm, se=FALSE) +
geom_text(x=3, y=40, aes(label=formula), data=labels, parse=TRUE, hjust=0, family = "CMU Serif") +
geom_text(x=3, y=37.5, aes(label=r2), data=labels, parse=TRUE, hjust=0, family = "CMU Serif") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
theme(panel.grid.minor = element_blank()) +
theme(text = element_text(family = "CMU Serif"))
# See: Chang, W. 2012 - R Graphics Cookbook
# And: http://stackoverflow.com/questions/3472980/ggplot-how-to-change-facet-labels
facet_names <- list(
'4' = "4WD",
'f' = "FWD",
'r' = "RWD"
)
facet_labels <- function(variable, value){
return(facet_names[value])
}
lm_labels <- function(dat) {
mod <- lm(hwy ~ displ, data=dat)
formula <- sprintf("italic(y) == %.2f %+.2f * italic(x)",
round(coef(mod)[1], 2), round(coef(mod)[2], 2))
r <- cor(dat$displ, dat$hwy)
r2 <- sprintf("italic(R^2) == %.2f", r^2)
data.frame(formula=formula, r2=r2, stringsAsFactors=FALSE)
}
labels <- ddply(mpg, "drv", lm_labels)
ggplot(mpg, aes(x=displ, y=hwy)) + geom_point() +
facet_grid(. ~ drv, labeller = facet_labels) +
xlab("Engine Size (l)") + ylab("Highway Fuel Consumption (mpg)") +
geom_smooth(method=lm, se=FALSE) +
geom_text(x=3, y=40, aes(label=formula), data=labels, parse=TRUE, hjust=0, family = "CMU Serif", size = 4) +
geom_text(x=3, y=37.5, aes(label=r2), data=labels, parse=TRUE, hjust=0, family = "CMU Serif") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
theme(panel.grid.minor = element_blank()) +
theme(text = element_text(family = "CMU Serif"))
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif"))))
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
ggplot(UK_shapefile, aes(x = Longitude, y = Latitude, group = group)) + geom_path() + plotdefaults
# Load the shapefile
UK_shapefile <- readShapePoly("assets/data/GBR_adm0.shp")
# Convert the shapefile to a dataframe
UK_shapefile <- fortify(UK_shapefile)
# Give the columns prettier names:
UK_shapefile$Latitude <- UK_shapefile$lat
UK_shapefile$Longitude <- UK_shapefile$long
UK_shapefile <- UK_shapefile[,!(names(UK_shapefile) %in% c("lat","long"))]
# Set the plot theme
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
# Load the shapefile
UK_shapefile <- readShapePoly("assets/data/GBR_adm0.shp")
# Convert the shapefile to a dataframe
UK_shapefile <- fortify(UK_shapefile)
# Give the columns prettier names:
UK_shapefile$Latitude <- UK_shapefile$lat
UK_shapefile$Longitude <- UK_shapefile$long
UK_shapefile <- UK_shapefile[,!(names(UK_shapefile) %in% c("lat","long"))]
# Set the plot theme
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
setwd("~/R/Presentation_20150119")
# Load the shapefile
UK_shapefile <- readShapePoly("assets/data/GBR_adm0.shp")
# Convert the shapefile to a dataframe
UK_shapefile <- fortify(UK_shapefile)
# Give the columns prettier names:
UK_shapefile$Latitude <- UK_shapefile$lat
UK_shapefile$Longitude <- UK_shapefile$long
UK_shapefile <- UK_shapefile[,!(names(UK_shapefile) %in% c("lat","long"))]
# Set the plot theme
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
# Load in a few useful packages
library(ggplot2)
library(plyr)
library(corrplot)
library(maptools)
# Load the shapefile
UK_shapefile <- readShapePoly("assets/data/GBR_adm0.shp")
# Convert the shapefile to a dataframe
UK_shapefile <- fortify(UK_shapefile)
# Give the columns prettier names:
UK_shapefile$Latitude <- UK_shapefile$lat
UK_shapefile$Longitude <- UK_shapefile$long
UK_shapefile <- UK_shapefile[,!(names(UK_shapefile) %in% c("lat","long"))]
# Set the plot theme
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
# Load the shapefile
UK_shapefile <- readShapePoly("assets/data/GBR_adm0.shp")
# Convert the shapefile to a dataframe
UK_shapefile <- fortify(UK_shapefile)
# Give the columns prettier names:
UK_shapefile$Latitude <- UK_shapefile$lat
UK_shapefile$Longitude <- UK_shapefile$long
UK_shapefile <- UK_shapefile[,!(names(UK_shapefile) %in% c("lat","long"))]
# Set the plot theme
plotdefaults <- list(theme_bw(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)),
theme(panel.grid.minor = element_blank()),
theme(text = element_text(family = "CMU Serif")))
ggplot(UK_shapefile, aes(x = Longitude, y = Latitude, group = group)) + geom_path() + plotdefaults
letters()
letters
letters[18]
data(cars)
summary(cars)
str(cars)
str(mpg)
str(mtcars)
describe(mtcars)
?mtcars
x <- 5
x^2 - 2 * x - 1
q <- function (x){
x^2 - 2 * x - 1
}
q(5)
f <- function (x){
x^2 - 2 * x - 1
}
f(5)
seq(-10:10, by = 0.1)
?seq
seq(from = -10, to = 10, by = 0.1)
x <- seq(from = -10, to = 10, by = 0.1)
plot(f(x))
f <- function (x){
x^2 - 3 * x - 12
}
f(5)
x <- seq(from = -10, to = 10, by = 0.1)
plot(f(x))
?polyroot
polyroot(c(2,3,12))
polyroot(c(12,3,2))
f(-0.75)
uniroot(f,-10:10)
uniroot(f, c(-10,10))
f(-10)
f(10)
uniroot(f, c(-10,10),extendInt="yes)
"
uniroot(f, c(-10,10),extendInt="yes")
uniroot(f, c(-10,10),extendInt="yes")
f(5)
seq(from = -10, to = 10, by = 0.1)
x <- seq(from = -10, to = 10, by = 0.1)
plot(f(x))
plot(f(x), type = l)
plot(f(x), type = "l")
plot(f(x), type = "l", xlab = "x")
x <- seq(from = -10, to = 10, by = 0.1)
x <- seq(from = -10, to = 10, by = 0.1)
y <- f(x)
data.frame(x = x, y = y)
x <- seq(from = -1, to = 1, by = 0.1)
y <- f(x)
data.frame(x = x, y = y)
plot(f(x), type = "l", xlab = "x")
plot(y = f(x), x = x, type = "l", xlab = "x")
str(mtcars[1:5])
?str
?data.frame
summary(mtcars)
summary(mtcars[1:5])
sd(mtcars[1:4])
mtcars[1:4]
mtcars[1:4,]
sd(mtcars[, 1:4])
mtcars[, 1:4]
sapply(mtcars[1:4], sd)
sapply(mtcars[1:4], sd, na.rm=TRUE)
summary(mtcars[1:4])
corrplot(cor(mtcars))
cor(mtcars)
summary(mtcars[1:4])
plot(x = mtcars$disp, y = mtcars$mpg)
?mtcars
plot(x = mtcars$disp, y = mtcars$mpg, xlab = "Displacement (cu.in.)", ylab = "Miles/(US) gallon")
plot(x = mtcars$disp, y = mtcars$mpg, xlab = "Displacement (cu.in.)", ylab = "Miles/Gallon (US)")
plot(x = mtcars$disp, y = mtcars$mpg, xlab = "Displacement (cu.in.)", ylab = "Miles/(US) Gallon")
plot(x = mtcars$disp, y = mtcars$mpg, xlab = "Displacement (cu.in.)", ylab = "Miles / (US) Gallon")
plot(x = mtcars$disp, y = mtcars$mpg,
main = "Relationship Between Engine Size and Fuel Economy",
xlab = "Displacement (cu.in.)", ylab = "Miles / (US) Gallon")
plot(x = mtcars$disp, y = mtcars$mpg,
main = "Relationship Between\nEngine Size and Fuel Economy",
xlab = "Displacement (cu.in.)", ylab = "Miles / (US) Gallon")
plot(x = mtcars$disp, y = mtcars$mpg,
main = "Relationship between\nEngine Size and Fuel Economy",
xlab = "Displacement (cu.in.)", ylab = "Miles / (US) Gallon")
model <- lm(mpg ~ disp, data = mtcars)
str(model)
summary(model)
?highlight
model <- lm(mpg ~ disp, data = mtcars)
summary(model)
?summary(model)
test <- summary(model)
data <- read.csv("weather_data.csv")
getwd()
data <- read.csv("assets/data/weather_data.csv")
str(data)
summary(data$month)
mean(data$DBT)
mean(data$DBT[data$month = 8,])
mean(data$DBT[data$month == 8,])
mean(data$DBT[data$month == 8])
aggregate(mtcars, mean, na.rm=TRUE)
aggregate(mtcars, FUN=mean, na.rm=TRUE)
aggregate(mtcars, by = month, FUN=mean, na.rm=TRUE)
aggregate(mtcars, by = data$month, FUN=mean, na.rm=TRUE)
list(0:12)
aggregate(mtcars, by = list(0:12), FUN=mean, na.rm=TRUE)
?aggregate
aggregate(mtcars, by = list(month = 1:12), FUN=mean, na.rm=TRUE)
list(month = 1:12)
aggregate(mtcars, by = list(data$month), FUN=mean, na.rm=TRUE)
aggregate(data, by = list(data$month), FUN=mean, na.rm=TRUE)
aggregate(data$DBT, by = list(data$month), FUN=mean, na.rm=TRUE)
aggregate(data$DBT, by = list(Month = data$month), FUN=mean, na.rm=TRUE)
aggregate(list(DBT = data$DBT), by = list(Month = data$month), FUN=mean, na.rm=TRUE)
plot(data$DBT)
plot(data$DBT, type = "l")
25-15
-12.
q()
exit()
quit()
